import nltk
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer, PorterStemmer
from nltk.corpus import stopwords
import string
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('stopwords')
def preprocess_text(text):
# Tokenization
tokens = word_tokenize(text.lower())
# Remove punctuation
tokens = [token for token in tokens if token not in string.punctuation]
# Remove stopwords
stop_words = set(stopwords.words('english'))
tokens = [token for token in tokens if token not in stop_words]
return tokens
def lemmatize(tokens):
lemmatizer = WordNetLemmatizer()
lemmas = [lemmatizer.lemmatize(token) for token in tokens]
return lemmas
def stem(tokens):
stemmer = PorterStemmer()
stems = [stemmer.stem(token) for token in tokens]
return stems
def main():
# Sample text
text = "Tokenization is the process of breaking down text into words and␣
↪phrases. Stemming and Lemmatization are techniques used to reduce words to␣
↪their base form."
# Preprocess text
tokens = preprocess_text(text)
print("tokens:",tokens)
# Lemmatization
1
lemmas = lemmatize(tokens)
print("Lemmatization:")
print(lemmas)
# Stemming
stems = stem(tokens)
print("\nStemming:")
print(stems)
if __name__ == "__main__":
main()




Program 2

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load the financial dataset
data = pd.read_csv("financial_dataset.csv")
# Assuming the dataset has two columns: "text" containing the text data and␣
↪"sentiment" containing
#sentiment labels
X = data['text']
y = data['sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,␣
↪random_state=42)
# Vectorize the text data using N-gram model
vectorizer = CountVectorizer(ngram_range=(1, 2)) # You can adjust the n-gram␣
↪range
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)
# Train the classifier
classifier = MultinomialNB()
2
classifier.fit(X_train_vectorized, y_train)
# Predict sentiment on the test set
y_pred = classifier.predict(X_test_vectorized)
# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
# Display classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))



Program 3
